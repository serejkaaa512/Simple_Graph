var searchIndex = {};
searchIndex["simple_chart"] = {"doc":"","items":[[3,"Axis","simple_chart","",null,null],[12,"min_value","","",0,null],[12,"max_value","","",0,null],[12,"interval_count","","",0,null],[12,"scale_interval_pix","","",0,null],[12,"decimal_places","","",0,null],[0,"macros","","",null,null],[3,"Formula","simple_chart::macros","",null,null],[12,"current_x","","",1,null],[12,"stop","","",1,null],[12,"start","","",1,null],[12,"step","","",1,null],[12,"f","","",1,null],[11,"new","","",1,null],[11,"next","","",1,null],[11,"clone","","",1,null],[0,"chart","simple_chart","",null,null],[3,"Point","simple_chart::chart","",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[3,"DisplayPoint","","",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[3,"Serie","","",null,null],[12,"iter","","",4,null],[3,"Chart","","",null,null],[4,"GraphError","","",null,null],[13,"NotEnoughPoints","","",5,null],[13,"NotEnoughSpace","","",5,null],[13,"NonUniquePoints","","",5,null],[6,"GraphResult","","",null,null],[8,"InPoint","","",null,null],[8,"IterInPoint","","",null,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"clone","","",2,null],[11,"from","","",2,null],[11,"from","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"new","","",4,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",6,null],[11,"new","","",6,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"add_axis_x","","",6,null],[11,"add_axis_y","","",6,null],[11,"draw","","",6,null],[0,"bitmap","simple_chart","",null,null],[3,"BitMap","simple_chart::bitmap","",null,null],[3,"Color","","",null,null],[12,"r","","",7,null],[12,"g","","",7,null],[12,"b","","",7,null],[11,"fmt","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",8,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"add_pixels","","",8,null],[11,"add_color","","",8,null],[11,"as_vec","","",8,null],[11,"fmt","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"color"}}],[11,"clone","simple_chart","",0,null],[11,"fmt","","",0,null],[11,"rotate","","",0,null],[11,"create_points","","",0,null],[11,"set_axis_auto","","",0,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":{"name":"axis"}}],[11,"set_axis_manual","","",0,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"u8"},{"name":"u8"},{"name":"usize"}],"output":{"name":"axis"}}],[11,"new","","",0,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"u8"},{"name":"u8"}],"output":{"name":"axis"}}],[14,"formula!","","",null,null]],"paths":[[3,"Axis"],[3,"Formula"],[3,"Point"],[3,"DisplayPoint"],[3,"Serie"],[4,"GraphError"],[3,"Chart"],[3,"Color"],[3,"BitMap"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","",null,null],[10,"context","","",1,null],[11,"fmt","","",0,null],[14,"quick_error!","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
initSearch(searchIndex);
